{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "from bokeh.models import ColumnDataSource\n",
    "from bokeh.models.widgets import DataTable, NumberFormatter, StringFormatter, TableColumn \n",
    "from bokeh.io import vplot, hplot, gridplot\n",
    "from bokeh.plotting import Session, cursession, output_server, show, figure\n",
    "\n",
    "from data.datastream import split_csvline_yf, queryinput_to_csv_yf, queryinput_to_gen_yf, queriesinput_to_syncgens_yf\n",
    "from data.datahandler import yield_from_last, shift_insert\n",
    "\n",
    "from candlestick.candlestick_yf_class import CandlestickYF\n",
    "from table.table_yf_class import TableYF\n",
    "from scatterplot.scatterplot_deltas_yf_class import ScatterplotDeltasYF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using saved session configuration for http://127.0.0.1:5006/\n",
      "To override, pass 'load_from_config=False' to Session\n"
     ]
    }
   ],
   "source": [
    "session = Session(load_from_config=False, root_url = \"http://127.0.0.1:5006/\")\n",
    "output_server(\"table\", url = \"http://127.0.0.1:5006/\")\n",
    "#output_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Inizializzazione variabili query\n",
    "\n",
    "#parametri utilizzati per effettuare la query a Yahoo Finance\n",
    "x_quote_id = \"UCG.MI\"\n",
    "y_quote_id = \"ISP.MI\"\n",
    "start_y = 2013\n",
    "start_m = 1\n",
    "start_d = 1\n",
    "stop_y = 2015\n",
    "stop_m = 12\n",
    "stop_d = 31\n",
    "step = \"d\" \n",
    "\n",
    "#parametri relativi al grafico CandleStick\n",
    "tmdict = {\"d\":1, \"w\":7, \"m\":(365 * 4 + 1) / (12 * 4)}\n",
    "candle_visualized_n = 15\n",
    "quadwidth_percentual = 0.2\n",
    "tmstep = tmdict[step] #per i mesi preso step pari ai giorni in 4 anni diviso i mesi in 4 anni\n",
    "\n",
    "#parametri relativi al widget Table\n",
    "row_n = 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "datagen = queriesinput_to_syncgens_yf((x_quote_id, y_quote_id), start_y, start_m, start_d, stop_y, stop_m, stop_d, step, headers = False)\n",
    "\n",
    "s0 = ScatterplotDeltasYF()\n",
    "\n",
    "c1 = CandlestickYF(candle_visualized_n, quadwidth_percentual, tmstep)\n",
    "t1 = TableYF(row_n)\n",
    "\n",
    "c2 = CandlestickYF(candle_visualized_n, quadwidth_percentual, tmstep)\n",
    "t2 = TableYF(row_n)\n",
    "\n",
    "objrow1_list = [s0]\n",
    "objrow2_list = [c1, t1]\n",
    "objrow3_list = [c2, t2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "table_and_candlestick_height = 230\n",
    "candlestick_width = 900\n",
    "scatter_height = 320\n",
    "posizione_toolbar = None\n",
    "\n",
    "#QUESTA PARTE E' DA ELIMINARE PORTANDOLA ALL'INTERNO DELLE RISPETTIVE CLASSI. IN PARTICOLARE\n",
    "#DECIDERE UN POSIZIIONAMENTO PREDEFINITO DELLE TOOLBAR\n",
    "#DECIDERE UNA DIMENSIONE PREDEFINITA DEGLI OGGETTI IN BASE A DIMENSIONI RELATIVE E IMPAGINAMENTO\n",
    "s0.get_plot().toolbar_location = posizione_toolbar\n",
    "s0.get_plot().xaxis.axis_label = x_quote_id\n",
    "s0.get_plot().yaxis.axis_label = y_quote_id\n",
    "s0.get_plot().plot_height = scatter_height\n",
    "s0.get_plot().plot_width = scatter_height\n",
    "\n",
    "c1.get_plot().toolbar_location = posizione_toolbar\n",
    "c1.get_plot().yaxis.axis_label = x_quote_id\n",
    "c1.get_plot().plot_height = table_and_candlestick_height\n",
    "c1.get_plot().plot_width = candlestick_width\n",
    "\n",
    "t1_height = table_and_candlestick_height\n",
    "\n",
    "c2.get_plot().toolbar_location = posizione_toolbar\n",
    "c2.get_plot().yaxis.axis_label = y_quote_id\n",
    "c2.get_plot().plot_height = table_and_candlestick_height\n",
    "c2.get_plot().plot_width = candlestick_width\n",
    "\n",
    "t2.height = table_and_candlestick_height"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plot = vplot(gridplot([[None, s0.get_plot(), None]]),\n",
    "             hplot(c1.get_plot(), t1.get_plot()), \n",
    "             hplot(c2.get_plot(), t2.get_plot()))\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-11-83fca01ee5b5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      9\u001b[0m         \u001b[0mto_update\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdatalines_list\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m     \u001b[0mcursession\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstore_objects\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mto_update\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 11\u001b[1;33m     \u001b[0mtime\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0.5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "while True:\n",
    "    datalines_list = next(datagen)\n",
    "    to_update = []\n",
    "    for obj in objrow1_list: \n",
    "        to_update += obj.update(datalines_list[0], datalines_list[1])\n",
    "    for obj in objrow2_list: \n",
    "        to_update += obj.update(datalines_list[0])\n",
    "    for obj in objrow3_list: \n",
    "        to_update += obj.update(datalines_list[1])\n",
    "    cursession().store_objects(*to_update)\n",
    "    time.sleep(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
